

          DFSBFS




#include <iostream>
#include <stack>
#include <queue>
#include <vector>

using namespace std;
vector<bool>visit;

void edge(vector<int>adj[],int u,int v){
    adj[u].push_back(v);
}

void bfs(int s,vector<int>adj[]){
    queue<int>q;
    q.push(s);
    visit[s]=true;
    
    while(!q.empty()){
        int u=q.front();
        cout<<u<<" ";
        q.pop();
        
        for(int i=0;i<adj[u].size();i++){
            if(!visit[adj[u][i]]){
                q.push(adj[u][i]);
                visit[adj[u][i]]=true;
            }
        }
    }
}

void dfs(int s,vector<int>adj[]){
    stack<int>stk;
    stk.push(s);
    visit[s]=true;
    
    while(!stk.empty()){
        int u=stk.top();
        cout<<u<<" ";
        stk.pop();
        
        for(int i=0;i<adj[u].size();i++){
            if(!visit[adj[u][i]]){
                stk.push(adj[u][i]);
                visit[adj[u][i]]=true;
            }
        }
    }
}


int main()
{
    int n,e;
    cout<<"bfs_dfs"<<endl;
    cout<<"No of vertices : ";
    cin>>n;
    
    cout<<"No of edges : ";
    cin>>e;
    
    visit.assign(n,false);
    
    vector<int>adj[n];
    
    int u,v,i;
    
    cout<<"Enter edges with source and target (With space in between)"<<endl;;
    
    for(i=0; i<e; i++){
        cout<<"vertex : ";
        cin>>u;
        cout<<"edge to vertex : ";
        cin>>v;
        
        edge(adj,u,v);
    }
    
    cout<<"BFS is : ";
    bfs(0,adj);
    
    visit.assign(n,false);
    cout<<"\nDFS is : " ;
    dfs(0,adj);
    return 0;}

